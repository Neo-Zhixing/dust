// Ray generation shader
#version 460
#extension GL_EXT_ray_tracing : require

#include "shared.glsl"

layout(location = 0) rayPayloadEXT RayPayload payload;
layout(set = 0, binding = 0) uniform writeonly image2D imgOutput;
layout(set = 1, binding = 0) uniform accelerationStructureEXT accelerationStructure;
layout(push_constant) uniform constants {
      mat3 rotation;
    vec3 position;
    float tanHalfFov;
} PushConstants;


void main() {
    const vec2 pixelNDC = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);
    vec2 pixelCamera = 2 * pixelNDC - 1;
    pixelCamera.y *= -1;
    pixelCamera.x *= float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
    pixelCamera *= PushConstants.tanHalfFov;

    vec3 pixelCameraWorld = PushConstants.rotation * vec3(pixelCamera, -1);


  payload.color = vec3(0.0, 0.0, 0.0);
    traceRayEXT(accelerationStructure, // acceleration structure
        gl_RayFlagsNoneEXT,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        PushConstants.position,     // ray origin
        0.0,           // ray min range
        pixelCameraWorld,  // ray direction
        1000.0,           // ray max range
        0               // payload (location = 0)
  );

  if (!(payload.color.x == 0 && payload.color.y == 0 && payload.color.z == 0)) {
    imageStore(imgOutput, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 1.0));
  }
}
